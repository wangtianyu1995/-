##https://blog.csdn.net/someonei/article/details/79598311

1、进程多与线程比较

1) 地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间
2) 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源
3) 线程是处理器调度的基本单位,但进程不是
4) 二者均可并发执行

5) 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制

2、协程多与线程进行比较

1) 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。

2) 线程进程都是同步机制，而协程则是异步

3) 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态

4）在实现多任务时, 线程切换从系统层?远不?保存和恢复 CPU上下?这么简
单。 操作系统为了程序运?的?效性每个线程都有??缓存Cache等等数
据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换?常耗性
能。但是协程的切换只是单纯的操作CPU的上下?，所以?秒钟切换个上百
万次系统都抗的住。

############################################################
3.多线程
由于多线程间通信大多采用共享内存的方式，线程间对全局变量进行操作，可能混导致数据混乱

解决方法：互斥锁，锁定状态下，只能一个线程进行写入操作。
4.多进程
进程不共享全局变量，如果某个子进程崩溃，不会导致主进程崩溃。

